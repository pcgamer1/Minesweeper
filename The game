#include<iostream>
#include<conio.h>
#include<stdio.h>
#include<iomanip>
#include<stdlib.h>
#include<ctype.h>
#include<time.h>
#include<stdlib.h>
#include<windows.h>

using namespace std;
char ch;
int g=0,t,f,h=0,z,w,q,u=4,v=4,l;
 char b[10][10];
 char a[10][10];

void delay(unsigned int mseconds)
{
    clock_t goal = mseconds + clock();
    while (goal > clock());
}
void outfull()
{
int i,j;
cout<<endl<<endl<<endl<<endl<<endl<<endl;
if(h!=1)
{cout<<setw(26)<<"YOU LOST!"<<endl;}
cout<<setw(29)<<"Full Matrix:"<<endl;
cout<<setw(30);
for(i=0;i<10;i++)
{
    cout<<i<<' ';
}
cout<<endl<<endl;
    for(i=0;i<10;i++)
    {cout<<setw(30);
        for(j=0;j<10;j++)
        {
            cout<<a[i][j]<<' ';delay(15);
        }
        cout<<' '<<' '<<i<<endl;
    }
    cout<<endl;
}
void out()
{system("cls");
int i,j;
cout<<endl<<endl<<endl<<endl<<endl<<endl;
cout<<setw(30);
for(i=0;i<10;i++)
{
    cout<<i<<' ';
}
cout<<endl<<endl;
for(i=0;i<10;i++)
{cout<<setw(30);
    for(j=0;j<10;j++)
    {

        cout<<b[i][j]<<' ';delay(15);}
        cout<<' '<<' '<<i<<endl;
    }
    cout<<endl;
}
void out1()
{system("cls");
int i,j;
cout<<endl<<endl<<endl<<endl<<endl<<endl;
cout<<setw(30);
for(i=0;i<10;i++)
{
    cout<<i<<' ';
}
cout<<endl<<endl;
for(i=0;i<10;i++)
{cout<<setw(30);
    for(j=0;j<10;j++)
    {
        cout<<b[i][j]<<' ';}
        cout<<' '<<' '<<i<<endl;
    }
    cout<<endl;
}


int minegen(int &q)
{
srand(time(0));
    if(q==1)
       w=rand()%6+11;
    else if(q==2)
       w=rand()%8+18;
    else if(q==3)
       w=rand()%18+27;
    else if(q==4)
       w=rand()%23+46;
    else if(q==5)
       w=rand()%19+70;
    else if(q==6)
       w=rand()%7+90;
    else if(q==7)
       w=98;
    else if(q==8)
       w=99;
    return w;
}

void generatemat2()
 {
     int i,j;
     for(i=0;i<10;i++)
     {
         for(j=0;j<10;j++)
         {
             a[i][j]='_';
         }

     }
 }

void generatemat1()
 {
     int i,j;
     for(i=0;i<10;i++)
     {
         for(j=0;j<10;j++)
         {
             b[i][j]='_';
         }
     }
 }

void generatemat()
{
int i=0,j,d,e,l=0;
srand(time(0));
w=minegen(q);
if(w!=98 && w!=99)
{

  while(l!=w)
       {
         d=rand()%10;
         a[i][d]='*';
         if(i==9)
           {
            i=0;
           }
            i++;
            l++;
       }
}

else if(w==98)
{
    for(i=0;i<2;i++)
       {
           d=rand()%10;
           l=rand()%10;
           a[l][d]=' ';
       }


    for(i=0;i<10;i++)
       {
           for(j=0;j<10;j++)
              {
                  if(a[i][j]!=' ')
                     {a[i][j]='*';
                     }
           }

       }
}

else if(w==99)
{
    d=rand()%10;
    l=rand()%10;
    a[4][1]='8';

    for(i=0;i<10;i++)
       {
           for(j=0;j<10;j++)
              {
                  if(a[i][j]!='8')
                     a[i][j]='*';
           }
       }
}

 for(i=0;i<10;i++)
{for(j=0;j<10;j++)
 {if(a[i][j]!='*')
    {e=0;
 if(a[i-1][j]=='*'&&i-1>=0)
 {e++;}
 if(a[i-1][j+1]=='*'&&i-1>=0&&j+1<=9)
 {e++;}
 if(a[i][j+1]=='*'&&j+1<=9)
 {e++;}
 if(a[i+1][j+1]=='*'&&i+1<=9&&j+1<=9)
 {e++;}
 if(a[i+1][j]=='*'&&i+1<=9)
 {e++;}
if(a[i+1][j-1]=='*'&&i+1<=9&&j-1>=0)
{e++;}
 if(a[i][j-1]=='*'&&j-1>=0)
 {e++;}
 if(a[i-1][j-1]=='*'&&i-1>=0&&j-1>=0)
 {e++;}
 if(e==0)
 {a[i][j]='E';}
 else if(e==1)
 {a[i][j]='1';}
else if(e==2)
 {a[i][j]='2';}
 else if(e==3)
 {a[i][j]='3';}
 else if(e==4)
 {a[i][j]='4';}
 else if(e==5)
 {a[i][j]='5';}
 else if(e==6)
 {a[i][j]='6';}
 else if(e==7)
 {a[i][j]='7';}
 else if(e==8)
 {a[i][j]='8';}
  }
 }
 }
}

void check()
{
z=0;h=0;
if(w==99)
{
    if(b[4][1]=='8')
    {
        h=1;cout<<endl;
        outfull();
    }
}
int i,j;
for(i=0;i<10;i++)
{for(j=0;j<10;j++)
{
    if(b[i][j]!='_')
    {
        z++;
    }
}
}
if(z==100)
{
    h=1;
}
}



void navigate()
{

     f=b[u][v];
     b[u][v]=178;
     out1();
     b[u][v]=f;
     cout<<"Navigate with arrow keys and press SPACEBAR to select a box"<<endl;
     cout<<"Press ESC to return to the MENU."<<endl;
     l=0;
     for(;l!=1;)
     {
         switch(ch=getche())
     {cout<<l;


         case 75:
         {
             v-=1;
             f=b[u][v];
         b[u][v]=178;cout<<endl;
         out1();
          cout<<"Navigate with arrow keys and press SPACEBAR to select a box"<<endl;
          cout<<"Press ESC to return to the MENU."<<endl;
         b[u][v]=f;
             break;
         }
         case 72:
         {
             u-=1;
             f=b[u][v];
         b[u][v]=178;cout<<endl;
         out1();
          cout<<"Navigate with arrow keys and press SPACEBAR to select a box"<<endl;
          cout<<"Press ESC to return to the MENU."<<endl;
         b[u][v]=f;
             break;
         }
         case 77:
         {
             v+=1;
             f=b[u][v];
         b[u][v]=178;cout<<endl;
         out1();
          cout<<"Navigate with arrow keys and press SPACEBAR to select a box"<<endl;
          cout<<"Press ESC to return to the MENU."<<endl;
         b[u][v]=f;
             break;
         }
         case 80:
         {
             u+=1;
             f=b[u][v];
         b[u][v]=178;cout<<endl;
         out1();
          cout<<"Navigate with arrow keys and press SPACEBAR to select a box"<<endl;
          cout<<"Press ESC to return to the MENU."<<endl;
         b[u][v]=f;
             break;
         }
         case ' ':
         {l=1;break;

            }
         case 27:
         {l=1;g=1;break;}
     }

     }
}

void remflag(int n1,int n2)
{
    b[n1][n2]='_';
    t++;
    cout<<"Removed Flag"<<endl;
}

void flag(int n1,int n2)
{
    if(t>0)
    b[n1][n2]='$';
    t--;
    cout<<"Flagged"<<endl;
}

void notflag(int n1,int n2)
{
int i,k,l,m,n,o,p,q,r,w,x;
k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,g=0;
 if(a[n1][n2]=='*')
 {
     b[n1][n2]='*';
     system("cls");
     system("COLOR FC");
     outfull();
     cout<<"Thanks for playing!"<<endl;
     cout<<"Press any key to continue.";
     g=1;
     getche();
 }
 else if(a[n1][n2]!='*')
 {for(i=0;;i++)
 {if(a[n1-i][n2]=='*')
 {
     k=1;l=1;m=1;q=1;r=1;
 }
 else
 {if(k!=1)
 {if(n1-i>=0)
     {b[n1-i][n2]=a[n1-i][n2];}
 }
 }
if(a[n1+i][n2]=='*')
 {
 o=1;n=1;p=1;m=1;q=1; }
 else
 {if(o!=1)
 {if(n1+i<=5)
    {b[n1+i][n2]=a[n1+i][n2];}
 }
 }
if(a[n1][n2+i]=='*')
 {
     m=1;k=1;l=1;n=1;o=1;
 }
 else
 {if(m!=1)
 {if(n2+i<=5)
     {b[n1][n2+i]=a[n1][n2+i];}
 }
 }


 if(a[n1][n2-i]=='*')
 {
      q=1;r=1;k=1;o=1;p=1;
 }
 else
 {if(q!=1)
 {if(n2-i>=0)
     {b[n1][n2-i]=a[n1][n2-i];}
 }
 }


 if(a[n1-i][n2+i]=='*')
{
    l=1;k=1;m=1;
}
else
{if(l!=1)
{if(n1-i>=0&&n2+i<=5)
{b[n1-i][n2+i]=a[n1-i][n2+i];}
}
}


if(a[n1-i][n2-i]=='*')
{
    r=1;q=1;k=1;
}
else
{if(r!=1)
{if(n1-i>=0&&n2-i>=0)
{b[n1-i][n2-i]=a[n1-i][n2-i];}
}
}


if(a[n1+i][n2+i]=='*')
{
    n=1;o=1;m=1;
}
else
{if(n!=1)
{if(n1+i<=5&&n2+i<=5)
{b[n1+i][n2+i]=a[n1+i][n2+i];}
}
}


if(a[n1+i][n2-i]=='*')
{
   p=1;q=1;o=1;
}
else
{if(p!=1)
{if(n1+i<=5&&n2-i>=0)
{b[n1+i][n2-i]=a[n1+i][n2-i];}
}
}
if(l!=1)
{for(x=n2,w=n1;w!=n1-i;w--,x++)
{
    if(a[w][n2+i]!='*')
    {if(w>=0&&n2+i<=9)
        {b[w][n2+i]=a[w][n2+i];}
    }
    if(a[n1-i][x]!='*')
    {if(n1-i>=0&&x<=9)
        {b[n1-i][x]=a[n1-i][x];}
    }
}
if(a[n1-i][n2+i]!='*')
{if(n1-i>=0&&n2+i<=9)
    {b[n1-i][n2+i]=a[n1-i][n2+i];}
}
}

if(r!=1)
{for(x=n2,w=n1;w!=n1-i;w--,x--)
{if(a[w][n2-i]!='*')
{if(w>=0&&n2-i>=0)
    {b[w][n2-i]=a[w][n2-i];}
}
if(a[n1-i][x]!='*')
{if(n1-i>=0&&x>=0)
    {b[n1-i][x]=a[n1-i][x];}
}
}
if(a[n1-i][n2-i]!='*')
{if(n1-i>=0&&n2-i>=0)
    {b[n1-i][n2-i]=a[n1-i][n2-i];}
}
}

if(n!=1)
{for(x=n2,w=n1;w!=n1+i;w++,x++)
{
    if(a[w][n2+i]!='*')
    {if(w<=9&&n2+i<=9)
        {b[w][n2+i]=a[w][n2+i];}
    }
    if(a[n1+i][x]!='*')
    {if(n1+i<=9&&x<=9)
        {b[n1+i][x]=a[n1+i][x];}
    }
}
if(a[n1+i][n2+i]!='*')
{if(n1+i<=9&&n2+i<=9)
    {b[n1+i][n2+i]=a[n1+i][n2+i];}
}
}

if(p!=1)
{for(x=n2,w=n1;w!=n1+i;w++,x--)
{
    if(a[w][n2-i]!='*')
    {if(w<=9&&n2-i>=0)
        {b[w][n2-i]=a[w][n2-i];}
    }
    if(a[n1+i][x]!='*')
    {if(n1+i<=9&&x>=0)
        {b[n1+i][x]=a[n1+i][x];}
    }
}
if(a[n1+i][n2-i]!='*')
{if(n1+i<=9&&n2-i>=0)
    {b[n1+i][n2-i]=a[n1+i][n2-i];}
}
}


if(k==1&&l==1&&m==1&&n==1&&o==1&&p==1&&q==1&&r==1)
{
    break;
}

 }


 }
}

int main()
{
int n;
system("cls");

while(n!=0)
{   system("cls");
    system("COLOR FC");
    cout<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl;
    cout<<setw(50)<<"MINESWEEPER(BETA)"<<endl;
    cout<<setw(30)<<"1. NEW GAME"<<endl;
    delay(150);
    cout<<setw(26)<<"2. HELP"<<endl;
    delay(150);
    cout<<setw(32)<<"3. UPDATE LOG"<<endl;
    delay(150);
    cout<<setw(26)<<"0. EXIT"<<endl;
    cout<<setw(39)<<"Enter your choice : ";
    cout<<endl<<endl<<endl<<endl;
    cin>>n;

if(n==1)
{
system("cls");
system("COLOR FC");
cout<<endl<<endl<<endl<<endl<<endl<<endl;
cout<<"Difficulty levels : "<<endl<<endl;
cout<<setw(54)<<"1. Amateur        ~   11 - 17 mines"<<endl;
cout<<setw(54)<<"2. Intermediate   ~   18 - 26 mines"<<endl;
cout<<setw(54)<<"3. Semi-Pro       ~   27 - 45 mines"<<endl;
cout<<setw(54)<<"4. Professional   ~   46 - 69 mines"<<endl;
cout<<setw(54)<<"5. Expert         ~   70 - 89 mines"<<endl;
cout<<setw(54)<<"6. Prodigy        ~   90 - 97 mines"<<endl;
cout<<setw(49)<<"7. God            ~   98 mines"<<endl;
cout<<setw(49)<<"8. GABE NEWELL    ~   99 mines"<<endl<<endl;
cout<<setw(44)<<"Enter difficulty level : ";
cout<<setw(50);cin>>q;
while(q>9)
{
    cout<<"Enter valid difficulty level.";
    cin>>q;
}
cout<<endl<<endl;
g=0;
generatemat2();
generatemat();
generatemat1();
out();
t=w;
cout<<"Matrix generated"<<endl;
cout<<"Number of mines deployed : "<<w<<endl;
cout<<"Press any key to start the game."<<endl;
getche();
while(g==0)
 {
 system("COLOR E0");
     navigate();
     if(g!=1)

     {cout<<endl;
 cout<<"Flags left :"<<t<<endl;
 if(t>0)
 {cout<<"0. No flag"<<endl;
  cout<<"1. flag"<<endl;
  cout<<"2. Remove flag"<<endl;
  cout<<"3. Back"<<endl;
  cout<<"Enter your choice : ";
  cin>>f;
  while(f!=0&&f!=1&&f!=2&&f!=3)
  {
      cout<<"Enter valid no.";
      cin>>f;
  }
 if(f==1)
 {
     while(b[u][v]!='_')
     {
         cout<<"Choose valid position"<<endl;
         navigate();
     }


        flag(u,v);
        check();

 }
 else if(f==0)
 {while(b[u][v]!='_')
 {
     cout<<"Choose valid position"<<endl;
     navigate();
 }
 notflag(u,v);
 check();
 }
 else if(f==2)
 {while(b[u][v]!='$')
 {
     cout<<"Choose valid position"<<endl;
     navigate();
 }



     remflag(u,v);
     check();

 }
 }
 else
 {
  cout<<"0. No flag"<<endl;
  cout<<"2. Remove flag"<<endl;
  cout<<"Enter your choice : ";
 cin>>f;
 if(f==0)
     {while(b[u][v]!='_')
 {
     cout<<"Choose valid position"<<endl;
     navigate();
     check();
 }
 notflag(u,v);}
     else if(f==2)
     {while(b[u][v]!='$')
     {
         cout<<"Choose valid position"<<endl;
         navigate();
     }

         remflag(u,v);
         check();

     }
 }
 if(h==1)
 {
     cout<<endl;
     cout<<"You Won!"<<endl;
     g=1;
     if(w>10 && w<18)
     cout<<"You have successfully completed the Amateur's level."<<endl;
     else if(w>=18 && w<27)
     cout<<"You have successfully completed the Intermediate's level."<<endl;
     else if(w>=27 && w<46)
     cout<<"You have successfully completed the Semi-Pro's level."<<endl;
     else if(w>=46 && w<70)
     cout<<"You have successfully completed the Professional's level."<<endl;
     else if(w>=70 && w<90)
     cout<<"You have successfully completed the Expert's level."<<endl;
     else if(w>=90 && w<98)
     cout<<"You have successfully completed the Prodigy's level."<<endl;
     else if(w==98)
     cout<<"You have successfully completed the God's level."<<endl;
     else if(w==99)
     {cout<<"You have successfully completed the GABE NEWELL'S level."<<endl;
     cout<<"Prize:GABE NEWELL'S STEAM ACCOUNT."<<endl;}
     cout<<"Challenge yourself with other difficulty levels."<<endl<<endl;
     delay(1500);
     cout<<"Press any key to continue.";
     getche();
     cout<<endl;
 }
 }
}
}
else if(n==2)
{   system("COLOR F9");
    system("cls");
    cout<<endl<<endl<<endl<<endl;
    cout<<setw(46)<<"Welcome To MINESWEEPER"<<endl<<endl<<endl;
    cout<<"1. You will have to go through the matrix and flag out the mines."<<endl<<endl;
    cout<<"2. A new random matrix will be generated every time you start a new game."<<endl<<endl;
    cout<<"3. The empty boxes are indicated by 'E' and mines by '*'."<<endl<<endl;
    cout<<"4. Every no. in the matrix indicates the no. of mines in contact with"<<endl;
    cout<<"   that box."<<endl<<endl;
    cout<<"5. You will be asked whether you want to flag a position or not or to"<<endl;
    cout<<"   remove a flag at every chance."<<endl<<endl;
    cout<<"6. You will be asked to enter the difficulty level i.e. the no. of mines"<<endl;
    cout<<"   every time you start a new game."<<endl<<endl;
    cout<<" BEST OF LUCK MA NIGGA"<<endl<<endl;
    delay(1500);
    cout<<"Press any key to continue.";
    getche();
}

else if(n==3)
{
system("COLOR F3");
system("cls");
cout<<endl<<endl<<endl<<endl<<endl;
cout<<setw(41)<<"UPDATE LOG"<<endl<<endl;
cout<<"Version 1.0.1"<<' '<<":"<<' '<<"Added Difficulty Level."<<endl<<endl;
cout<<"Version 1.0.2"<<' '<<":"<<' '<<"Added Index No. Assistance for Noobs."<<endl<<endl;
cout<<"Version 1.0.3"<<' '<<":"<<' '<<"Added Credits."<<endl<<endl;
cout<<"Version 1.0.4"<<' '<<":"<<' '<<"Boxes now open in a more civilized way forming edges"<<endl;
cout<<"                most of the time."<<endl<<endl;
cout<<"Version 1.0.5"<<' '<<":"<<' '<<"Added Update Log."<<endl<<endl;
cout<<"Version 1.0.6"<<' '<<":"<<' '<<"The location (row and column number) is asked precisely."<<endl<<endl;
cout<<"Version 1.0.7"<<' '<<":"<<' '<<"Added Difficulty Level Chart."<<endl<<endl;
cout<<"Version 1.0.8"<<' '<<":"<<' '<<"Mines are generated randomly based on the chosen difficulty"<<endl;
cout<<"                levels."<<endl<<endl;
cout<<"Version 1.0.9"<<' '<<":"<<' '<<"You can now navigate with the help of arrow keys!"<<endl<<endl;
cout<<"Version 1.1.0"<<' '<<":"<<' '<<"Colors ... yay!"<<endl<<endl;
delay(1500);
cout<<"Press any key to continue.";
getche();
}
}
return 0;
}
